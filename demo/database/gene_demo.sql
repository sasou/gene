/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50556
Source Host           : localhost:3306
Source Database       : gene_demo

Target Server Type    : MYSQL
Target Server Version : 50556
File Encoding         : 65001

Date: 2018-07-01 09:45:49
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for app_mark
-- ----------------------------
DROP TABLE IF EXISTS `app_mark`;
CREATE TABLE `app_mark` (
  `mark_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'id',
  `mark_type` tinyint(1) DEFAULT '0' COMMENT '类型',
  `mark_title` varchar(50) NOT NULL DEFAULT '' COMMENT '文档名称',
  `app_description` text NOT NULL COMMENT '文档内容',
  `user_id` int(11) NOT NULL COMMENT '上传者ID',
  `order` int(11) NOT NULL DEFAULT '0' COMMENT '排序',
  `status` tinyint(1) NOT NULL DEFAULT '0' COMMENT '应用状态：0不可用、1可用',
  `addtime` int(11) NOT NULL DEFAULT '0' COMMENT '添加时间',
  `updatetime` int(11) NOT NULL DEFAULT '0' COMMENT '修改时间',
  PRIMARY KEY (`mark_id`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8 COMMENT='mark信息表';

-- ----------------------------
-- Records of app_mark
-- ----------------------------
INSERT INTO `app_mark` VALUES ('3', '1', '概述与入门', '# 欢迎使用Gene框架\n    最新版本：V2.2.0\n    开源地址：https://github.com/sasou/php-gene  作者：sasou\n    文档地址：http://php-gene.com/doc.html\n\n# 概览 #\n\n* ## 介绍  ##\n    **Gene** 是一个灵活、强大、简单、高效的c扩展框架。通过精心的设计与高效的技术实现，配合数据库、缓存等类库，带来新的开发体验。\n\n* ## 特点概述  ##\n    1. **简单** ：入门快，配置简单；\n    2. **灵活** ：灵活安全的路由，前置、后置注入等；\n    3. **强大** ：配置进程级缓存，路由配置简单强大、支持函数回调、支持rest风格等。\n    4. **高效** ：框架基本不增加性能消耗，配置文件按需加载、运行效率高。\n\n* ## 目录结构  ##\n    > 对于gene应用，可以遵循类似下面的目录结构，熟悉后可以自定义目录结构.  \n        application  \n        ├─Config  \n        ├─Controllers  \n        ├─Models  \n        ├─Services  \n        └─Views  \n        public   \n        └─index.php  \n\n# 入门 #\n\n*  ##  入口文件  ##\n    > 入口文件是所有请求的入口, 一般都借助于rewrite规则, 把所有的请求都重定向到这个入口文件  \n    \n    ``` \n    define(\'APP_ROOT\', __dir__ . \'/app/\');\n    $app = \\Gene\\Application::getInstance();\n    $app\n	  ->load(\"router.ini.php\")\n	  ->load(\"config.ini.php\")\n	  ->run();  \n\n*  ##  路由配置文件  ##\n    > 可以配置http请求方式（get,post,put,patch,delete,trace,connect,options,head），配置路由处理函数：回调函数、类的方法（格式className@methodName）。\n\n    ``` \n    $router = new \\Gene\\Router();\n    $router->clear()\n	->get(\"/\", \"\\Controllers\\Index@run\")\n	->error(404,function()\n	{\n		echo \" 404 \";\n	})\n	->hook(\"before\", function(){\n		echo \" before \";\n	})\n	->hook(\"after\", function($params){\n		echo \" after \";\n	});  \n  \n*  ##  变量配置文件  ##\n    > 配置缓存支持bool、int、long、string、array、常量等数据类型。  \n    \n    ``` \n    //数据库类注入配置\n    $config->set(\"db\", [\n        \'class\' => \'\\Gene\\Db\',\n        \'params\' => [[\n        \'dsn\' => \'mysql:dbname=gene_web;host=127.0.0.1;port=3306;charset=utf8\',\n        \'username\' => \'root\',\n        \'password\' => \'\',\n        \'options\' => [PDO::ATTR_PERSISTENT => true]\n            ]],\n        \'instance\' => true\n    ]);\n    \n    //缓存类注入配置\n    $config->set(\"memcache\", [\n        \'class\' => \'\\Ext\\Cache\\Memcache\',\n        \'params\' => [[\n        \'servers\' => [[\'host\' => \'127.0.0.1\', \'port\' => 11211]],\n        \'persistent\' => true,\n            ]],\n        \'instance\' => true\n    ]);\n            \n*  ##  控制器文件  ##\n    > 对于路由配置的\\Controllers\\Index@run, 控制器的目录是在app目录下的Controllers目录下Index.php文件, Action的命名是run。  \n    \n    ``` \n    namespace Controllers;\n    class Index extends \\Gene\\Controller\n    {\n        /**\n         * run\n         * @param type $params\n         */\n        public function run()\n        {\n            echo \'版本：\', gene_version();\n        }\n    }\n\n*  ##  运行  ##\n    在浏览器输入项目地址，比如：http://localhost/  \n    看到 before run after 输出吧！！！  \n   >**注意**：如果没有看到before run after, 那么请查看PHP的错误日志, 找出问题在哪里。\n', '43', '0', '1', '1458548250', '1529294305');
INSERT INTO `app_mark` VALUES ('4', '2', '路由类 Gene\\Router', '# 路由类 Gene\\Router #\n\n* ## 介绍  ##\n    **Gene\\Router** 是gene框架的核心类之一，本框架区别于其他常见框架的最大地方就是独特、强大、简单的路由定义等。  \n   路由强大灵活，支持回调、类方法；支持rest、http请求方式（get,post,put,patch,delete,trace,connect,options,head）等；\n    支持定义全局、局部钩子，每个方法可以定义清理全局钩子等。\n\n* ## 实例化  ##\n     初始化路由，传递缓存key，将会把路由配置缓存起来。  \n     Gene\\Router如果作为gene_application应用的路由配置使用，可以不传递缓存key，自动沿用应用的标志名称；如果作为一个独立的功能使用，则需要传递缓存key，区别不同的路由配置。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 路由缓存标志 \n    \n    > *返回值*：  Gene\\Router实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化路由对象\n	$router = new Gene\\Router();\n\n* ## 设置路由系列方法  ##\n    方法：get,post,put,patch,delete,trace,connect,options,head；  \n    设置路由的方法，涵盖rest操作的基本方法。\n    路由路径支持参数，回调方法支持类方法和匿名函数，钩子定义路由钩子及全局钩子。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    routerPath | String  | 是 | 路由路径，支持参数。 \n    callback | String or Closure  | 是 | 回调方法，支持类方法和匿名函数。\n    hook | String  | 否 | 路由钩子，设置钩子、设置全局钩子。  \n    \n    > *返回值*：  Gene\\Router实例化对象本身。\n\n    ### 实例1:路由设置类方法 ###\n    访问路由地址，将会调用设置的类的方法。\n    类方法的格式:classNanme@methodName.  \n    比如： index@list；  \n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	//路由设置类方法\n	$router->get(\"/\",\"Controllers\\Index@index\");\n	``` \n	\n    ### 实例2:路由设置匿名函数 ###\n    访问路由地址，将会调用设置的匿名函数。\n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	//路由设置匿名函数\n	$router->get(\"/\",function(){\n		echo \"index\";\n	});\n	``` \n    ### 实例3:路由设置支持参数 ###\n    访问路由地址，将会把定义的路由参数传递给回调方法里面。  \n    参数的格式：冒号后面加参数名。  \n    比如：\":id\"。  \n    回调方法里面获取参数：路由里面的参数（可能有多个），作为一个数组传递给回调方法，回调方法里面可以直接获取。  \n    \n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	//路由设置支持参数\n	$router->get(\"/news/:id.html\",function($params){\n		echo \"id:\" , $params[\'id\'];\n	});\n	``` \n	\n    ### 实例4:路由设置钩子 ###\n    路由钩子可以设置当前路由的钩子，也可以设置全局钩子，或者禁用全局钩子。  \n    钩子的格式：curHookName@globalHook。  \n                globalHook参数列表：\n                clearBefore 禁用前置全局钩子  \n                clearBefore 禁用后置全局钩子  \n                clearAll  禁用前置、后置全局钩子  \n    注意：路由里面设置钩子过后，需要调用钩子定义方法定义需要的钩子。  \n    \n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	//路由设置钩子\n	$router->get(\"/admin/index\", Controllers_Admin_Index@index, \"adminHook\");\n	\n    /*  定义后台管理员权限检查钩子 */\n    $router->hook(\"adminHook\", function () {\n        if (!isset($_SESSION[\'admin\'][\'user_id\'])) {\n            die(\'没有操作权限！\');\n        }\n    });\n	``` \n	\n* ## hook  ##\n    定义钩子，可以自定义钩子名称（before、after除外）。  \n    before：默认前置全局钩子；  \n    after：默认后置全局钩子；  \n    全局钩子定义后默认都会执行，除非路由定义里面声明排除：  \n    比如排除前置全局钩子：@clearBefore；\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    hookName | String  | 是 | 钩子名称。 \n    callback | String or Closure  | 是 | 回调方法，支持类方法和匿名函数。\n    \n    > *返回值*：  Gene\\Router实例化对象本身。\n\n    ### 实例1:定义前置全局钩子 ###   \n      \n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	//定义前置全局钩子\n	$router->hook(\"before\", function(){\n		echo \" before \";\n	})；\n    ``` \n    ### 实例2:定义后置全局钩子 ###\n      \n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n    //定义后置全局钩子\n	$router->hook(\"after\", function($params){\n		echo \" after \";\n		if(is_array($params))var_dump($params);\n	});\n    ``` \n    ### 实例3:定义自定义钩子 ###\n      \n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n    //定义自定义钩子\n    $router ->hook(\"webCheck\", function () {\n        isset($_SESSION) || session_start();\n        if (!isset($_SESSION[\'user\'][\'user_id\'])) {\n            header(\'/login.html\', 302);\n            die;\n        }\n    });\n    ``` \n    \n\n* ## group  ##\n    路由分组方法。  \n    如果有多个路由定义公用了共同的前缀，就可以使用group方法定义前缀。  \n    group方法必须成对使用，形成闭环。\n    其他类似功能方法：prefix。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    name | String  | 否 | 分组名称，如果参数不为空就是打开分组，为空就是关闭分组；  \n    \n    > *返回值*：  Gene\\Router实例化对象本身。\n\n    ### 实例: ###\n\n    ``` 	\n    //实例化路由对象\n	$router = new Gene\\Router();\n    //路由分组:将后台的用户管理放在一个分组里面\n    $router\n    ->group(\"/admin/user\")\n        ->get(\"/add\", \"Controllers\\Admin\\User@add\", \"adminAuth@clearAll\")\n        ->post(\"/addPost\", \"Controllers\\Admin\\User@addPost\", \"adminAuth@clearBefore\")\n        ->get(\"/edit/:id\", \"Controllers\\Admin\\User@edit\", \"adminAuth@clearAll\")\n        ->post(\"/editPost\", \"Controllers\\Admin\\User@editPost\", \"adminAuth@clearBefore\")\n        ->get(\"/del/:id\", \"Controllers\\Admin\\User@del\", \"adminAuth@clearBefore\")\n    ->group();\n	\n* ## error  ##\n    定义路由错误处理。  \n    默认内置了401处理钩子，如果定义了401错误，路由处理失败会自动调用。\n\n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    hookName | String  | 是 | 钩子名称。 \n    callback | String or Closure  | 是 | 回调方法，支持类方法和匿名函数。  \n\n    > *返回值*：  Gene\\Router实例化对象本身。\n\n    ### 实例: ###\n\n    ``` \n    //实例化路由对象\n	$router = new Gene\\Router();\n	//定义401\n    $router->error(401, function () {\n            echo \" 401 \";\n    });\n	\n* ## getTime  ##\n    获取当前路由配置的缓存时间。  \n    \n    ### 参数: ###\n    无   \n    \n    > *返回值*：  String。\n\n    ### 实例: ###\n\n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	$time = $router->getTime();\n	\n* ## getEvent  ##\n    获取当前路由缓存的事件。  \n    \n    ### 参数: ###\n    无   \n    \n    > *返回值*：  array。\n\n    ### 实例: ###   \n\n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	$event = $router->getEvent();\n	\n* ## getTree  ##\n    获取当前路由缓存的路由定义。  \n    \n    ### 参数: ###\n    无   \n    \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	$tree = $router->getTree();\n	\n* ## delEvent  ##\n    删除当前路由缓存的时间。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 缓存名称， 默认删除当前项目。\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ### \n\n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	$result = $router->delEvent();\n	\n* ## delTree  ##\n    删除当前路由缓存的路由定义。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 缓存名称， 默认删除当前项目。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	$result = $router->delTree();\n	\n* ## clear  ##\n    清空当前路由缓存的路由定义和事件。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 缓存名称， 默认删除当前项目。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	$result = $router->clear();\n	\n* ## getRouter  ##\n    获取路由对象。  \n    \n    ### 参数: ###\n    无 \n    \n    > *返回值*：  Gene\\Router实例化对象本身。\n\n    ### 实例: ###\n\n    ``` \n	//获取实例化路由对象\n	$router = Gene\\Router::getRouter();\n	\n* ## run  ##\n    该方法执行后会运行路由定义。默认web应用可以不传参数,如果是cli方式下访问或者执行任务，则需要传递参数。  \n    前面gene_application里面也有run方法，其实是调用的Gene\\Router里面的run。  \n    两者的区别是：\n        gene_application里面封装了配置加载更新的逻辑，不修改是不会重复加载的，实现了高效率。  \n        Gene\\Router里面没有处理缓存判断，如果单独使用Gene\\Router模块的话，用户需要使用getTime方法获取已缓存时间，进行判断处理。   \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    method | String  | 否 | 请求方式（默认自动取访问方式：get、post等） \n    path | String  | 否 | 请求路径（默认自动取访问路径：比如/admin/login）\n    \n    > *返回值*：  Gene\\Router实例化对象本身。\n\n    ### 实例1:web应用 ###\n      \n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	//配置路由\n	$router->clear()\n    	->get(\"/\",function(){\n    		echo \"index\";\n    	})\n	    ->run();\n    ``` \n    ### 实例2:cli应用 ###\n      \n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	//配置路由\n	$router->clear()\n    	->get(\"/\",function(){\n    		echo \"index\";\n    	})\n	    ->run(\'get\', \'/admin/task\')\n	\n* ## runError  ##\n    运行已定义的error。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    errorName | String  | 是 | error名称。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	//实例化路由对象\n	$router = new Gene\\Router();\n	$result = $router->runError(\"401\");\n	\n	', '43', '0', '1', '1528889616', '1529318166');
INSERT INTO `app_mark` VALUES ('5', '2', '配置类 Gene\\Config', '# 配置类 Gene\\Config #\n\n* ## 介绍  ##\n    **Gene\\Config** 是gene框架的核心类之一，项目所需的配置变量都可以通过Gene\\Config来配置使用。  \n    配置支持bool、int、long、string、array、常量等数据类型等。\n\n* ## 实例化  ##\n     初始化配置，传递缓存key，将会把配置缓存起来。  \n     Gene\\Config如果作为gene_application应用的配置使用，可以不传递缓存key，自动沿用应用的标志名称；如果作为一个独立的功能使用，则需要传递缓存key，区别不同的路由配置。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 缓存标志 \n    \n    > *返回值*：  Gene\\Config实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化配置对象\n	$config = new Gene\\Config();\n	\n* ## set  ##\n    设置配置。 支持php基本数据类型，对象除外。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 配置名称。 \n    value | String  | 否 | 配置变量。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	//实例化配置对象\n	$config = new Gene\\Config();\n	$result = $config->set(\"db\",array(\n	       \'db1\'=>array(\n    	       \'host\'=>\'127.0.0.1\',\n    	       \'user\'=>\'test\'\n	       )\n	);\n	\n* ## get  ##\n    获取配置。 支持链式参数名称 \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 配置名称。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: 获取db1的host  ###\n\n    ``` \n	//实例化配置对象\n	$config = new Gene\\Config();\n	$host = $config->get(\"db.db1.host\");\n	\n\n* ## del  ##\n    删除配置。 支持链式参数名称 \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 配置名称。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	//实例化配置对象\n	$config = new Gene\\Config();\n	$result = $config->del(\"db.db1\");\n	\n* ## clear  ##\n    清空当前配置缓存的变量。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 缓存名称， 默认删除当前项目。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	//实例化配置对象\n	$config = new Gene\\Config();\n	$result = $config->clear();\n	', '43', '0', '1', '1528891607', '1529318207');
INSERT INTO `app_mark` VALUES ('6', '2', '应用类 Gene\\Application', '# 应用类 Gene\\Application #\n\n* ## 介绍  ##\n    **Gene\\Application** 是gene框架的启动方法类，使用该类下的方法初始化一个应用、加载全局配置、路由定义、设置类加载器、启动应用等。\n\n* ## 实例化  ##\n    对于gene应用，初始化一个项目时需要设置一个项目名称.  在其他框架里面通常根据目录区别不同的项目，在gene框架里面放弃了这种方式，通过设置自定义的项目标志来区别不同的应用，如此：同一根目录下的入口文件理论上支持任意的项目了。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    appName | String  | 是 | 项目标志 \n    \n    > *返回值*：  Gene\\Application实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化一个demo应用\n	$app = new Gene\\Application(\'demo\');\n\n* ## load  ##\n    加载指定配置文件，由于配置文件加载后保存到进程内存中了，不需要每次请求都加载。因此，系统默认10秒后检测配置文件是否修改，如果修改了，就会重新加载配置文件到进程内存。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    fileName | String  | 是 | 配置文件名称 \n    time | int  | 否 | 加载检测时间（默认10秒）\n    \n    > *返回值*：  Gene\\Application实例化对象本身。\n\n    ### 实例: ###\n    ``` \n	//实例化一个demo应用\n	$app = new Gene\\Application(\'demo\');\n	//加载路由文件\n	$app->load(\"router.ini.php\") \n	//加载配置文件\n	    ->load(\"config.ini.php\");\n	``` \n	\n* ## setView  ##\n    设置模版只定义路径、模版后缀 \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    path | int  | 是 | 路径\n    ext | int  | 是 | 只定义后缀\n    \n    > *返回值*：  Gene\\Application实例化对象本身。\n\n    ### 实例: ###\n    ``` \n	//定义异常处理函数\n    function geneHandler($e) {\n    	\\Gene\\Router::displayExt(\'error\');\n    }\n    \n    $app = new Gene\\Application();\n    $app\n    	->load(\"router.ini.php\")\n    	->load(\"config.ini.php\")\n    	->setView(null, \'.htm\')\n	``` \n	\n* ## setMode  ##\n    设置运行异常模式  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    error | int  | 是 | 是否将error转为exception\n    exception | int  | 是 | 是否获取exception后处理\n    \n    > *返回值*：  Gene\\Application实例化对象本身。\n\n    ### 实例: ###\n    ``` \n	//定义异常处理函数\n    function geneHandler($e) {\n    	\\Gene\\Router::displayExt(\'error\');\n    }\n    \n    $app = new Gene\\Application();\n    $app\n    	->load(\"router.ini.php\")\n    	->load(\"config.ini.php\")\n    	->setMode(1,1)\n	``` \n	\n* ## error  ##\n    设置是否处理异常\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    error | int  | 是 | 是否将error转为exception\n    \n    > *返回值*：  Gene\\Application实例化对象本身。\n\n    ### 实例: ###\n    ``` \n	//定义异常处理函数\n    function geneHandler($e) {\n    	\\Gene\\Router::displayExt(\'error\');\n    }\n    \n    $app = new Gene\\Application();\n    $app\n    	->load(\"router.ini.php\")\n    	->load(\"config.ini.php\")\n    	->error(1)\n	``` \n	\n* ## exception  ##\n    设置是否处理异常  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    exception | int  | 是 | 是否获取exception后处理\n    \n    > *返回值*：  Gene\\Application实例化对象本身。\n\n    ### 实例: ###\n    ``` \n	//定义异常处理函数\n    function geneHandler($e) {\n    	\\Gene\\Router::displayExt(\'error\');\n    }\n    \n    $app = new Gene\\Application();\n    $app\n    	->load(\"router.ini.php\")\n    	->load(\"config.ini.php\")\n    	->exception(1)\n	``` \n	\n* ## run  ##\n    该方法执行后会运行整个应用。默认web应用可以不传参数,如果是cli方式下访问或者执行任务，则需要传递参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    method | String  | 否 | 请求方式（默认自动取访问方式：get、post等） \n    path | String  | 否 | 请求路径（默认自动取访问路径：比如/admin/login）\n    \n    > *返回值*：  Gene\\Application实例化对象本身。\n\n    ### 实例1:web应用 ###  \n      \n    ``` \n	//实例化一个demo应用\n	$app = new Gene\\Application(\'demo\');\n	//加载路由文件\n	$app->load(\"router.ini.php\") \n	//加载配置文件\n	    ->load(\"config.ini.php\");\n	    ->run();\n    ``` \n    ### 实例2:cli应用 ###\n      \n    ``` \n	//实例化一个demo应用\n	$app = new Gene\\Application(\'demo\');\n	//加载路由文件\n	$app->load(\"router.ini.php\") \n	//加载配置文件\n	    ->load(\"config.ini.php\");\n	    ->run(\'get\', \'/admin/task\')\n    ``` \n\n* ## autoload  ##\n    设置类自动加载，可以自定义加载函数。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    path | String  | 是 | app项目路径  \n    loadFN | String  | 否 | 自定义函数  \n    \n    > *返回值*：  gene_application实例化对象本身。\n\n    ### 实例: ###\n\n    ``` \n	define(\'APP_ROOT\', __dir__ . \'/app/\');\n	//实例化一个demo应用\n	$app = new Gene\\Application(\'demo\');\n	//设置项目路径\n	$app->autoload(APP_ROOT);\n	\n* ## urlParams  ##\n    取当前路由参数。  \n    比喻路由定义：/search/:name/:p.html，那么urlParams返回数组为:array(\'name\'=>\'\',\'p\'=>\'\');\n    \n    ### 参数: ###\n    无 \n    \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n	//获取url路由变量\n	$params = Gene\\Application::urlParams();\n	\n* ## getMethod  ##\n    获取当前访问的方式，可选值为get,post,put,patch,delete,trace,connect,options,head等。  \n    \n    ### 参数: ###\n    无   \n    \n    > *返回值*：  String。\n\n    ### 实例: ###\n\n    ``` \n	//获取访问方式\n	$method = Gene\\Application::getMethod();\n	\n* ## getPath  ##\n    获取当前访问的Path，比如：/search/test/1.html。  \n    \n    ### 参数: ###\n    无   \n    \n    > *返回值*：  String。\n\n    ### 实例: ###\n\n    ``` \n	//获取访问路径\n	$path = Gene\\Application::getPath();\n	\n* ## getRouterUri  ##\n    获取当前访问的路由定义，比如path：/search/test/1.html，其路由定义为：/search/:name/:p.html。  \n    \n    ### 参数: ###\n    无   \n    \n    > *返回值*：  String。\n\n    ### 实例: ###\n\n    ``` \n	//获取路由定义\n	$path = Gene\\Application::getRouterUri();\n	\n* ## config  ##\n    获取配置变量。在配置文件里面写入的配置变量，可以通过这个方法获取。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 是 | 变量名称   \n    \n    > *返回值*：  String or int or boolean or array。\n\n    ### 实例: ###\n\n    ``` \n	//获取配置\n	$config = (array) Gene\\Application::config($name);\n	\n* ## getEnvironment  ##\n    获取运行环境（定义在php.ini）。  \n    \n    ### 参数: ###\n    无 \n    \n    > *返回值*：  int。\n\n    ### 实例: ###\n\n    ``` \n	//获取配置\n	echo Gene\\Application::getEnvironment();', '43', '0', '1', '1528891650', '1529318334');
INSERT INTO `app_mark` VALUES ('7', '2', '控制器类 Gene\\Controller', '# 控制器类 Gene\\Controller #\n\n* ## 介绍  ##\n    **Gene\\Controller** 是gene框架的核心类之一，实现了MVC中的C。\n\n* ## 实例化  ##\n     初始化加载类。  \n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  Gene\\Controller实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化加载对象\n	$c = new Gene\\Controller();  \n\n	\n* ## get  ##\n    获取GET参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_GET变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Controller::get(\"id\");  \n	//控制器内部调用\n	$this->get(\"id\");\n	\n* ## post  ##\n    获取POST参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_POST变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Controller::post(\"id\");  \n	//控制器内部调用\n	$this->post(\"id\");\n	\n* ## request  ##\n    获取GET,POST参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_GET,$_POST变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Controller::request(\"id\");  \n	//控制器内部调用\n	$this->request(\"id\");\n	\n* ## cookie  ##\n    获取COOKIE参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_COOKIE变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Controller::cookie(\"id\");  \n	//控制器内部调用\n	$this->cookie(\"id\");\n	\n	\n* ## files  ##\n    获取FILES参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_FILES变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Controller::files(\"id\");  \n	//控制器内部调用\n	$this->files(\"id\");\n	\n	\n* ## server  ##\n    获取SERVER参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_SERVER变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Controller::server(\"id\");  \n	//控制器内部调用\n	$this->server(\"id\");\n	\n* ## env  ##\n    获取ENV参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_ENV变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Controller::env(\"id\");  \n	//控制器内部调用\n	$this->env(\"id\");\n	\n* ## urlParams  ##\n    获取路由定义的Url参数。\n    \n    ### 参数: ###\n    无。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Controller::urlParams(\"id\");  \n	//控制器内部调用\n	$this->urlParams(\"id\");\n	\n* ## getMethod  ##\n    获取当前请求方式getMethod。\n    \n    ### 参数: ###\n    无。 \n    \n    > *返回值*：  string。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Controller::getMethod();  \n	//控制器内部调用\n	$this->getMethod();\n	\n* ## isAjax  ##\n    判断是否Ajax请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Controller::isAjax();  \n	//控制器内部调用\n	echo $this->isAjax();\n	\n* ## isGet  ##\n    判断是否Get请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Controller::isGet();  \n	//控制器内部调用\n	echo $this->isGet();\n	\n* ## isPost  ##\n    判断是否Post请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Controller::isPost();  \n	//控制器内部调用\n	echo $this->isPost();\n	\n* ## isPut  ##\n    判断是否Put请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Controller::isPut();  \n	//控制器内部调用\n	echo $this->isPut();\n	\n* ## isHead  ##\n    判断是否Head请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Controller::isHead();  \n	//控制器内部调用\n	echo $this->isHead();\n	\n* ## isOptions  ##\n    判断是否Options请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Controller::isOptions();  \n	//控制器内部调用\n	echo $this->isOptions();\n	\n* ## isDelete  ##\n    判断是否Delete请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Controller::isDelete();  \n	//控制器内部调用\n	echo $this->isDelete();\n	\n* ## isCli  ##\n    判断是否Cli请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Controller::isCli();  \n	//控制器内部调用\n	echo $this->isCli();\n	\n* ## redirect  ##\n    页面跳转。  \n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  null。\n\n    ### 实例:  ###\n\n    ``` \n	//控制器内部调用\n	echo $this->redirect(\"http://baidu.com\");\n	\n\n* ## display  ##\n    渲染视图。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    viewFile | String  | 是 | 模版文件 \n    \n    > *返回值*：  无。\n\n    ### 实例: ###\n\n    ``` \n	$this->display(\'login\');\n	\n* ## displayExt  ##\n    渲染视图。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    viewFile | String  | 是 | 模版文件\n    parentFile | String  | 否 | 父级模版文件\n    isCompile | boolean  | 否 | 是否强制编译\n    \n    > *返回值*：  无。\n\n    ### 实例: ###\n\n    ``` \n	$this->displayExt(\'login\', \'common\');\n	\n* ## contains  ##\n    加载子模版。  \n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  无。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Controller::contains();\n	\n* ## __set  ##\n    对象属性成员赋值，可以用来对类注入对象控制反转。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    name | String  | 是 | 对象名称。 \n    value | mixed  | 是 | 对象。 \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n    $this->rest = Gene\\Factory::create(\"\\Ext\\Services\\Rest\");\n	\n* ## __get  ##\n    返回注入信息或者赋值变量。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    name | String  | 是 | 对象名称。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->rest;	\n	\n* ## success  ##\n    返回成功信息。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    msg | String  | 是 | 成功信息。 \n    code | int  | 否 | 成功代码：默认2000。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->success(\"添加成功\");\n	\n* ## error  ##\n    返回成功信息。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    msg | String  | 是 | 失败信息。 \n    code | int  | 否 | 失败代码：默认4000。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->error(\"删除失败\");\n    \n    \n* ## data  ##\n    返回成功数据。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    data | String  | 是 | 返回数据。 \n    count | String  | 否 | 数量：默认0。 \n    msg | String  | 否 | 成功信息，默认空。 \n    code | int  | 否 | 成功代码：默认2000。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->data(\"添加成功\");\n    \n* ## json  ##\n    输出json文本。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    data | array  | 是 | 返回数据。 \n    callback | String  | 否 | 跨域标志：默认空。 \n    code | int  | 否 | 代码：默认2000。 \n    > *返回值*：  void。\n\n    ### 实例: ###\n\n    ``` \n    $callback = \\Gene\\Request::get(\"callback\");\n    $this->json($params, $callback);', '43', '0', '1', '1528891672', '1529418700');
INSERT INTO `app_mark` VALUES ('8', '2', '视图类 Gene\\View', '# 视图类 Gene\\View #\n\n* ## 介绍  ##\n    **Gene\\View** 是gene框架的核心类之一，实现了MVC中的V。\n\n* ## 实例化  ##\n     初始化加载类。  \n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  Gene\\View实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化加载对象\n	$c = new Gene\\View();  \n\n	\n* ## display  ##\n    渲染视图，php模版文件。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    viewFile | String  | 是 | 模版文件 \n    \n    > *返回值*：  无。\n\n    ### 实例: ###\n\n    ``` \n	$this->display(\'login\');\n	\n* ## template  ##\n    渲染视图，针对需要编译的php模版文件。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    viewFile | String  | 是 | 模版文件\n    isCompile | boolean  | 否 | 是否强制编译\n    \n    > *返回值*：  无。\n\n    ### 实例: ###\n\n    ``` \n	$this->template(\'login\', 1);\n	', '43', '0', '1', '1528891711', '1529318607');
INSERT INTO `app_mark` VALUES ('9', '2', '加载类 Gene\\Load', '# 加载类 Gene\\Load #\n\n* ## 介绍  ##\n    **Gene\\Load** 是gene框架的核心类之一，实现了累的自动加载与手动加载。\n\n* ## 实例化  ##\n     初始化加载类。  \n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  Gene\\Load实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化加载对象\n	$load = new Gene\\Load();\n	\n* ## autoload  ##\n    加载指定类。会用默认加载方式自动加载。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    className | String  | 是 | 类名。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Load::autoload(\"models_admin_user\");\n	\n* ## import  ##\n    加载指定文件。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    fileName | String  | 是 | 文件名称。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例:  ###\n\n    ``` \n	//实例化加载对象\n	$load = Gene\\Load::getInstance();\n	$host = $load->import(\"admin.php\");\n	\n\n* ## getInstance  ##\n    取加载对象单例。  \n    \n    ### 参数: ###\n    无 \n    \n    > *返回值*：  Gene\\Load实例化对象。\n\n    ### 实例: ###\n\n    ``` \n	$load = Gene\\Load::getInstance();\n	\n	', '43', '0', '1', '1528891727', '1529318695');
INSERT INTO `app_mark` VALUES ('10', '2', '请求类 Gene\\Request', '# 请求类 Gene\\Request #\n\n* ## 介绍  ##\n    **Gene\\Request** 是gene框架的核心类之一，封装了处理HTTP请求相关的方法。\n\n* ## 实例化  ##\n     初始化加载类。  \n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  Gene\\Request实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化加载对象\n	$r = new Gene\\Request();  \n\n	\n* ## get  ##\n    获取GET参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_GET变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Request::get(\"id\");  \n	\n* ## post  ##\n    获取POST参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_POST变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Request::post(\"id\");  \n\n	\n* ## request  ##\n    获取GET,POST参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_GET,$_POST变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Request::request(\"id\");  \n\n	\n* ## cookie  ##\n    获取COOKIE参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_COOKIE变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Request::cookie(\"id\");  \n\n	\n	\n* ## files  ##\n    获取FILES参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_FILES变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Request::files(\"id\");  \n	\n	\n* ## server  ##\n    获取SERVER参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_SERVER变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Request::server(\"id\");  \n	\n* ## env  ##\n    获取ENV参数。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    $name | String  | 否 | 参数名,为空返回$_ENV变量数组。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Request::env(\"id\");  \n	\n* ## urlParams  ##\n    获取路由定义的Url参数。\n    \n    ### 参数: ###\n    无。 \n    \n    > *返回值*：  mixed。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Request::urlParams(\"id\");  \n	\n* ## getMethod  ##\n    获取当前请求方式getMethod。\n    \n    ### 参数: ###\n    无。 \n    \n    > *返回值*：  string。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Request::getMethod();  \n	\n* ## isAjax  ##\n    判断是否Ajax请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Request::isAjax();  \n	\n* ## isGet  ##\n    判断是否Get请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Request::isGet();  \n	\n* ## isPost  ##\n    判断是否Post请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Request::isPost();  \n	\n* ## isPut  ##\n    判断是否Put请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Request::isPut();  \n	\n* ## isHead  ##\n    判断是否Head请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Request::isHead();  \n	\n* ## isOptions  ##\n    判断是否Options请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Request::isOptions();  \n	\n* ## isDelete  ##\n    判断是否Delete请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Request::isDelete();  \n	\n* ## isCli  ##\n    判断是否Cli请求。\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	echo Gene\\Controller::isCli();  \n	//控制器内部调用\n	echo $this->isCli();\n	', '43', '0', '1', '1528891748', '1529318848');
INSERT INTO `app_mark` VALUES ('11', '2', '响应类 Gene\\Response', '# 响应类 Gene\\Response #\n\n* ## 介绍  ##\n    **Gene\\Response** 是gene框架的核心类之一，封装响应HTTP请求的方法。\n\n* ## 实例化  ##\n     初始化加载类。  \n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  Gene\\Response实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化加载对象\n	$c = new Gene\\Response();  \n\n* ## redirect  ##\n    页面跳转。  \n    \n    ### 参数:无 ###\n    \n    > *返回值*：  null。\n\n    ### 实例:  ###\n\n    ``` \n	//控制器内部调用\n	echo $this->redirect(\"http://baidu.com\");\n	\n* ## alert  ##\n    输出页面js提示信息。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    text | String  | 是 | 提示信息。 \n    url | object  | 否 | 跳转地址。 \n    \n    > *返回值*：  无。\n\n    ### 实例: ###\n\n    ``` \n	//使用\n	Gene\\Application::alert(\'访问出错\', \'http://baidu.com\');\n	\n	\n* ## success  ##\n    返回成功信息。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    msg | String  | 是 | 成功信息。 \n    code | int  | 否 | 成功代码：默认2000。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->success(\"添加成功\");\n	\n* ## error  ##\n    返回成功信息。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    msg | String  | 是 | 失败信息。 \n    code | int  | 否 | 失败代码：默认4000。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->error(\"删除失败\");\n    \n    \n* ## data  ##\n    返回成功数据。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    data | String  | 是 | 返回数据。 \n    count | String  | 否 | 数量：默认0。 \n    msg | String  | 否 | 成功信息，默认空。 \n    code | int  | 否 | 成功代码：默认2000。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->data(\"添加成功\");\n    \n* ## json  ##\n    输出json文本。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    data | array  | 是 | 返回数据。 \n    callback | String  | 否 | 跨域标志：默认空。 \n    code | int  | 否 | 代码：默认2000。 \n    > *返回值*：  void。\n\n    ### 实例: ###\n\n    ``` \n    $callback = \\Gene\\Request::get(\"callback\");\n    \\Gene\\Response::json($params, $callback);\n    \n* ## setHeader  ##\n    设置header。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    key | array  | 是 | header标志。 \n    value | String  | 值 | header值。 \n    > *返回值*：  void。\n\n    ### 实例: ###\n\n    ``` \n    \\Gene\\Response::setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    \n* ## setJsonHeader  ##\n    设置json header。\n    \n    ### 参数: ###\n    无 \n    > *返回值*：  void。\n\n    ### 实例: ###\n\n    ``` \n    \\Gene\\Response::setJsonHeader();\n    \n* ## setHtmlHeader  ##\n    设置html header。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  void。\n\n    ### 实例: ###\n\n    ``` \n    \\Gene\\Response::setHtmlHeader();', '43', '0', '1', '1528891761', '1529418607');
INSERT INTO `app_mark` VALUES ('12', '2', 'Session类 Gene\\Session', '# Session类 Gene\\Session #\n\n* ## 介绍  ##\n    **Gene\\Session** 是gene框架的核心类之一，提供session操作的封装。  \n\n* ## 实例化  ##\n    可以不经过实例化，直接使用静态方法；\n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  Gene\\Session实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化对象\n	$cache = new Gene\\Session();\n	\n* ## set  ##\n    设置session。 支持php基本数据类型，对象除外。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 是 | key名称。 \n    value | mixed  | 是 | 变量,支持int、string、array、常量等。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n    //set\n	Gene\\Session::set(\"a\",\"testd\")\n	\n* ## has  ##\n    判断指定session key是否存在。 \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | key名称\n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n    //get  \n    echo Gene\\Session::has(\"a\")\n	\n	\n	\n* ## get  ##\n    获取session。 \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 配置名称。 为空返回$_SESSION;\n    \n    > *返回值*：  boolean、string、array等。\n\n    ### 实例: ###\n\n    ``` \n    //get  \n    Gene\\Session::get(\"a\")\n	\n\n* ## del  ##\n    删除session。 \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 是 | key名称。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n    //del \n    Gene\\Session::del(\"a\")\n	\n* ## clear  ##\n    清空session。  \n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  int。\n\n    ### 实例: ###\n\n    ``` \n    //clear\n	Gene\\Session::clear()\n	\n* ## __get  ##\n    魔术方法：__get，调用get。  \n    \n    ### 参数: ###\n    无\n\n* ## __isset  ##\n    魔术方法：__isset，调用has。  \n    \n    ### 参数: ###\n    无\n    \n* ## __set  ##\n    魔术方法：__set，调用set。  \n    \n    ### 参数: ###\n    无\n\n* ## __unset  ##\n    魔术方法：__unset，调用del。  \n    \n    ### 参数: ###\n    无', '43', '0', '1', '1528891822', '1529319010');
INSERT INTO `app_mark` VALUES ('13', '2', '异常类 Gene\\Exception', '# 异常类 Gene\\Exception #\n\n* ## 介绍  ##\n    **Gene\\View** 是gene框架的核心类之一，实现了对异常的处理。\n\n* ## 实例化  ##\n     初始化加载类。  \n    \n    ### 参数: ###\n    无\n    \n    > *返回值*：  Gene\\Exception实例化对象本身。\n\n	\n* ## setErrorHandler  ##\n    渲染视图，php模版文件。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    callback | mixde  | 是 | 处理方法\n    type | int  | 是 | 异常代码\n    \n    > *返回值*：  boolean。\n\n	\n* ## setExceptionHandler  ##\n    异常处理回调。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    callback | mixde  | 是 | 处理方法\n    \n    > *返回值*：  boolean。\n\n	\n* ## doError  ##\n    处理error。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    code | int  | 是 | 异常编码\n    msg | String  | 是 | 异常信息\n    file | String  | 否 | 文件\n    line | int  | 否 | 代码行\n    params | mixed  | 否 | 其他参数\n    \n    > *返回值*：  无。\n', '43', '0', '1', '1528891861', '1529319084');
INSERT INTO `app_mark` VALUES ('14', '2', 'Di类 Gene\\Di', '# 注册类 Gene\\Di #\n\n* ## 介绍  ##\n    **Gene\\Di** 是gene框架的核心类之一，用Gene\\Di来做单例集中管理非常方便，效率极高；同时，用di实现ioc对象注入，控制反转等框架功能。\n\n* ## 实例化  ##\n     初始化reg。Gene\\Di用来存取对象，适合管理单对象，提供的方法都是静态方法。\n    \n    ### 参数: ###\n    无 \n    \n    > *返回值*：  Gene\\Di实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化注册对象\n	$reg = new Gene\\Di();\n	\n* ## set  ##\n    设置对象。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 是 | 配置名称。 \n    value | object  | 是 | 实例化化的对象。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	$aClass = new demo();\n    Gene\\Di::set(\"testClass\",$a);\n	\n* ## get  ##\n    获取对象。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 配置名称。 \n    \n    > *返回值*：  object 对象。\n\n    ### 实例： ###\n\n    ``` \n	$aClass = Gene\\Di::get(\"testClass\");\n	\n\n* ## del  ##\n    删除对象。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 配置名称。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Di::del(\"testClass\");\n	\n* ## has  ##\n    判断对象是否已存在。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 配置名称。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n	$result = Gene\\Di::has(\"testClass\")\n	\n* ## 综合使用例子  ##\n    在框架中，通常封装工厂模式，需要实现单例，用Gene\\Di就很方便了，并且可以全项目通用。  \n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    keyName | String  | 否 | 配置名称。 \n    \n    > *返回值*：  boolean。\n\n    ### 实例:数据库工厂 ###\n\n    ``` \n    /**\n     * Connect db from config\n     *\n     * @param array $config db config\n     * @param string db config key name\n     * @return Db\n     */\n    public function db($name = NULL)\n    {\n        NULL === $name && $name = $this->_db;\n\n        if (is_array($name)) {\n            return Ext\\Com\\Db::factory($name);\n        }\n\n        $regName = \"_db_{$name}\";\n        if (!$db = Gene\\Di::get($regName)) {\n            $config = (array) Gene\\Application::config($name);\n            $db = Ext\\Com\\Db::factory($config);\n            Gene\\Di::set($regName, $db);\n        }\n\n        return $db;\n    }', '43', '0', '1', '1528891907', '1529319417');
INSERT INTO `app_mark` VALUES ('15', '2', '工厂类 Gene\\Factory', '# 工厂类 Gene\\Factory #\n\n* ## 介绍  ##\n    **Gene\\Factory** 是gene框架的核心类之一，用Gene\\Factory来进行工厂调用，可以指定初始化参数以及是否单例（不需要被调用类支持）。\n\n* ## 实例化  ##\n     初始化Factory。\n    \n    ### 参数: ###\n    无 \n    \n    > *返回值*：  Gene\\Factory实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化注册对象\n	$factory = new Gene\\Factory();\n	\n* ## create  ##\n    创建对象。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    class | String  | 是 | 类名称。 \n    params | array  | 否 | 类初始化参数。 \n    type | boolean  | 否 | 是否单例模式。 \n    > *返回值*：  object。\n\n    ### 实例: ###\n\n    ``` \n    $user = Gene\\Factory::create(\"\\Models\\Admin\\User\", [], true);\n	', '43', '0', '1', '1529324540', '1529324620');
INSERT INTO `app_mark` VALUES ('16', '2', 'Model类 Gene\\Model', '# Model类 Gene\\Model #\n\n* ## 介绍  ##\n    **Gene\\Model** 是gene框架的核心类之一，MVC分层开发模式中，数据模型尽量继承此类。来进行工厂调用，封装成了单例继承调用，支持对象全局、局部注入，简化模型类的类库调用，降低模型的耦合度。\n\n* ## getInstance  ##\n     初始化Model。\n    \n    ### 参数: ###\n    无 \n    \n    > *返回值*： 继承Gene\\Model类的实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化注册对象\n	$factory = Gene\\Factory::getInstance();\n	\n* ## __set  ##\n    对象属性成员赋值，可以用来对类注入对象控制反转。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    name | String  | 是 | 对象名称。 \n    value | mixed  | 是 | 对象。 \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n    $this->rest = Gene\\Factory::create(\"\\Ext\\Services\\Rest\");\n	\n* ## __get  ##\n    返回注入信息或者赋值变量。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    name | String  | 是 | 对象名称。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->rest;	\n	\n* ## success  ##\n    返回成功信息。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    msg | String  | 是 | 成功信息。 \n    code | int  | 否 | 成功代码：默认2000。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->success(\"添加成功\");\n	\n* ## error  ##\n    返回成功信息。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    msg | String  | 是 | 失败信息。 \n    code | int  | 否 | 失败代码：默认4000。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->error(\"删除失败\");\n    \n    \n* ## data  ##\n    返回成功数据。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    data | String  | 是 | 返回数据。 \n    count | String  | 否 | 数量：默认0。 \n    msg | String  | 否 | 成功信息，默认空。 \n    code | int  | 否 | 成功代码：默认2000。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->data(\"添加成功\");', '43', '0', '1', '1529371973', '1529397421');
INSERT INTO `app_mark` VALUES ('17', '2', 'Service类 Gene\\Service', '# Service类 Gene\\Service #\n\n* ## 介绍  ##\n    **Gene\\Service** 是gene框架的核心类之一，MVC分层开发模式中，控制器、数据模型往往参杂了比较多的业务逻辑代码，业务层次比较混乱，Gene框架推荐将业务逻辑单独放到service层，保持控制器、数据模型的功能独立性，控制器专注控制分发，数据模型专注数据操作。Service封装成了单例继承调用，支持对象全局、局部注入，简服务类的类库调用，降低服务层的耦合度。\n\n* ## getInstance  ##\n     初始化Service。\n    \n    ### 参数: ###\n    无 \n    \n    > *返回值*： 继承Gene\\Service类的实例化对象本身。\n\n    ### 实例: ###\n    ``` \n    //实例化注册对象\n	$factory = Gene\\Service::getInstance();\n	\n* ## __set  ##\n    对象属性成员赋值，可以用来对类注入对象控制反转。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    name | String  | 是 | 对象名称。 \n    value | mixed  | 是 | 对象。 \n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n    $this->rest = Gene\\Factory::create(\"\\Ext\\Services\\Rest\");\n	\n* ## __get  ##\n    返回注入信息或者赋值变量。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    name | String  | 是 | 对象名称。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->rest;	\n	\n* ## success  ##\n    返回成功信息。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    msg | String  | 是 | 成功信息。 \n    code | int  | 否 | 成功代码：默认2000。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->success(\"添加成功\");\n	\n* ## error  ##\n    返回成功信息。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    msg | String  | 是 | 失败信息。 \n    code | int  | 否 | 失败代码：默认4000。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->error(\"删除失败\");\n    \n    \n* ## data  ##\n    返回成功数据。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    data | String  | 是 | 返回数据。 \n    count | String  | 否 | 数量：默认0。 \n    msg | String  | 否 | 成功信息，默认空。 \n    code | int  | 否 | 成功代码：默认2000。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    return $this->data(\"添加成功\");', '43', '0', '1', '1529377960', '0');
INSERT INTO `app_mark` VALUES ('18', '2', '性能分析类 Gene\\Benchmark', '# 性能分析类 Gene\\Benchmark #\n\n* ## 介绍  ##\n    **Gene\\Benchmark** 封装了性能分析的两个主要指标，运行时间与内存占用，方便收集性能数据。\n\n* ## start  ##\n     开始记录。\n##     \n    ### 参数: ###\n    无 \n    \n    > *返回值*： 空。\n\n    ### 实例: ###\n    ``` \n	Gene\\Benchmark::start();\n	\n* ## end  ##\n    无 \n    \n    > *返回值*： 空。\n\n    ### 实例: ###\n\n    ``` \n	Gene\\Benchmark::end();\n	\n* ## time  ##\n    取运行时间。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    type | boolean  | 否 | 返回值精度:true 秒单位，默认false 毫秒单位。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    echo $this->time();	\n	\n* ## memory  ##\n    取内存占用大小。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    type | boolean  | 否 | 返回值精度:true kb单位，默认false mb单位。 \n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    echo $this->memory();\n', '43', '0', '1', '1529399988', '0');
INSERT INTO `app_mark` VALUES ('19', '2', '数据库Orm类 Gene\\Db', '# 数据库Orm类 Gene\\Db #\n\n* ## 介绍  ##\n    **Gene\\Db** 封装了性能分析的两个主要指标，运行时间与内存占用，方便收集性能数据。\n\n* ## 初始化  ##\n     初始化Db类。  \n\n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    config | array  | 是 | 数据库连接配置。 \n    \n    > *返回值*： 空。  \n\n    ### 实例: ###\n    ``` \n    $config = array (\n            \'dsn\' => \'mysql:dbname=test;host=127.0.0.1;port=3306;charset=utf8\',\n            \'username\' => \'root\',\n            \'password\' => \'\',\n            \'options\' => array(PDO::ATTR_PERSISTENT => true)\n    );\n    \n    $abc = new Gene\\db($config);  \n    \n* ## getPdo  ##\n    无 \n    \n    > *返回值*： 返回PDO对象。\n\n    ### 实例: ###\n\n    ``` \n	$abc->getPdo();\n	\n* ## select  ##\n    查询选择。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    table | string  | 是 | 表。 \n    fields | mixed  | 否 | 字段字符串或者数组，默认*\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->select(\'user\');\n    $abc->select(\'user\', \"id,name,time\");\n    $abc->select(\'user\', [\"id\", \"name\",\"time\"])\n	\n* ## count  ##\n    取总数选择。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    table | string  | 是 | 表。 \n    fields | mixed  | 否 | 字段字符串或者数组，默认* \n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->count(\'user\');\n    $abc->count(\'user\', \"id\")；\n    $abc->count(\'user\', [\"id\"])；\n\n* ## insert  ##\n    插入数据。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    table | string  | 是 | 表。 \n    fields | array  | 是 | 插入数据 \n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->insert(\'user\', [\"name\"=>\"test\",\"time\"=>\"2018-12-21\"])；\n    \n* ## batchInsert  ##\n    插入数据。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    table | string  | 是 | 表。 \n    fields | array  | 是 | 插入数据（多个） \n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->batchInsert(\'user\', [[\"name\"=>\"test1\",\"time\"=>\"2018-12-21\"],[\"name\"=>\"test2\",\"time\"=>\"2018-12-22\"]])；\n    \n* ## update  ##\n    更新数据。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    table | string  | 是 | 表。 \n    fields | array  | 是 | 更新数据\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->update(\'user\', [\"name\"=>\"test55\",\"time\"=>\"2018-12-24\"])；\n    \n* ## delete  ##\n    删除数据。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    table | string  | 是 | 表。 \n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->delete(\'user\')；\n    \n* ## where  ##\n    where查询。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    where | string|array  | 是 | where条件或者条件数组。 \n    fields | array  | 是 | 变量数据\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    // 方式一：\n    $abc->select(\'user\', [\"id\", \"name\",\"time\"])->where(\"id=:id and name=:name\",[\":name\"=>\"test1\", \":id\"=>5])；\n    $abc->update(\'user\', [\"name\"=>\"test55\",\"time\"=>\"2018-12-24\"])->where(\"id=?\", [4])；\n    // 方式二：\n    $where = [\'id\'=>array([62,63], \'in\' , \'and\'),\'name\'=>[\'%test\',\'like\', \'or\']];\n    $abc->select(\'user\', [\"id\", \"name\",\"time\"])->where($where)；\n    \n* ## in  ##\n    删除数据。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    in | string  | 是 | in条件。 \n    fields | array  | 是 | 条件数据\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->select(\'user\', [\"id\", \"name\",\"time\"])->in(\"id in(?)\", [3,4])；\n    \n* ## sql  ##\n    sql查询。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    sql | string  | 是 | sql语句。 \n    fields | array  | 是 | 变量数据\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->sql(\"select * from user where id=?\", [3])；\n    \n* ## limit  ##\n    limit条件。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    start | int  | 是 | 开始位置或者数量。 \n    num | int  | 否 | 数量。\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->sql(\"select * from user\")->in(\"name in(?)\", [\"test\",\"test55\"])->limit(1)；\n    $abc->sql(\"select * from user\")->in(\"name in(?)\", [\"test\",\"test55\"])->limit(0, 1)；\n    \n* ## order  ##\n    order条件。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    order | string  | 是 | 排序条件。 \n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->sql(\"select * from user\")->in(\"name in(?)\", [\"test\",\"test55\"])->order(\"id desc\")；\n    \n* ## execute  ##\n    执行sql。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  Pdo State对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->select(\'user\', [\"id\", \"name\",\"time\"])->limit(0, 1)->execute()->fetch();\n    \n* ## all  ##\n    取全部数据。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->select(\'user\', [\"id\", \"name\",\"time\"])->order(\"id desc\")->limit(0, 10)->all()；\n    \n* ## row  ##\n    取一行数据。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->select(\'user\', [\"id\", \"name\",\"time\"])->order(\"id desc\")->limit(0, 10)->row()；\n    \n* ## cell  ##\n    取第一个字段数据。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->select(\'user\', [\"id\", \"name\",\"time\"])->order(\"id desc\")->limit(0, 10)->cell()； // 返回id值；\n    \n* ## lastId  ##\n    取当前插入数据id。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    echo $abc->insert(\'user\', [\"name\"=>\"test\",\"time\"=>\"2018-12-21\"])->lastId()；\n    \n* ## affectedRows  ##\n    取当前操作影响的数据数量。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    echo $abc->delete(\'user\')->where(\"id=:id\", [\":id\"=>\"4\"])->affectedRows();\n    \n* ## beginTransaction  ##\n    开始数据库事务。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->beginTransaction();\n    \n* ## beginTransaction  ##\n    开始数据库事务。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  Db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->beginTransaction();\n    \n* ## inTransaction  ##\n    判断是否在数据库事务中。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n    echo $abc->inTransaction();\n    \n* ## commit  ##\n    提交保存事务。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n    $abc->commit();\n    \n* ## rollBack  ##\n    回滚取消事务。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  boolean。\n\n    ### 实例: ###\n\n    ``` \n    $abc->rollBack();\n    \n* ## print  ##\n    打印当前sql语句。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  db对象。\n\n    ### 实例: ###\n\n    ``` \n    $abc->print();\n    \n* ## history  ##\n    取数据库执行sql历史及性能（紧调试环境下自动记录）。\n    \n    ### 参数: ###\n    无\n    > *返回值*：  array。\n\n    ### 实例: ###\n\n    ``` \n    echo $abc->history();\n    \n    \n* ## 综合demo  ##\n    示范db类的操作语句。\n    \n    ### 实例: ###\n\n    ```   \n	$abc->count(\'user\', \"id\")->order(\"id desc\")->limit(0, 1)->all();\n	$abc->select(\'user\', [\"id\", \"name\",\"time\"])->order(\"id desc\")->limit(0, 1)->all();\n	$abc->select(\'user\', [\"id\", \"name\",\"time\"])->limit(0, 1)->execute()->fetch();\n	$abc->select(\'user\', [\"id\", \"name\",\"time\"])->where(\"id=:id and name=:name\",[\":name\"=>\"test1\", \":id\"=>5])->row();\n    $abc->beginTransaction();\n	$abc->insert(\'user\', [\"name\"=>\"test\",\"time\"=>\"2018-12-21\"])->lastId();\n	$abc->batchInsert(\'user\', [[\"name\"=>\"test1\",\"time\"=>\"2018-12-21\"],[\"name\"=>\"test2\",\"time\"=>20181222]])->affectedRows();\n	$abc->update(\'user\', [\"name\"=>\"test55\",\"time\"=>\"2018-12-24\"])->where(\"id=?\", \"4\")->affectedRows();\n	$abc->delete(\'user\')->where(\"id=:id\", [\":id\"=>\"4\"])->affectedRows();\n	$abc->update(\'user\', [\"name\"=>\"test55\",\"time\"=>\"2018-12-24\"])->where(\"id=?\", null)->in(\" and id in(?)\", [3,4])->affectedRows();\n    $abc->commit();\n	$abc->select(\'user\', [\"id\", \"name\",\"time\"])->where(\"id=?\", [\"3\"])->in(\" and id in(?)\", [3,4])->row();\n    $abc->sql(\"select * from user\")->in(\"name in(?)\", [\"test\",\"test55\"])->order(\"id desc\")->limit(0, 1)->print()->row();\n    $where = [\'id\'=>array([62,63], \'in\' , \'and\'),\'name\'=>[\'test\',\'like\', \'or\']];\n    $abc->select(\'user\', [\"id\", \"name\",\"time\"])->where($where)->where(\" and id=?\", 61)->in(\" and name in(?)\", \"test\")->print()->all();\n    $abc->select(\'user\', [\"id\", \"name\",\"time\"])->where(\"id=?\", [\"61\"])->in(\" and name in(?)\", [\"test\"])->print()->row();\n    $abc->history();', '43', '0', '1', '1529417643', '0');
INSERT INTO `app_mark` VALUES ('20', '1', '依赖注入(IOC)', '# 依赖注入(IOC) #\n\n* ## 介绍  ##\n    依赖注入(Dependency Injection)是Gene框架作为现代框架的核心功能，采用注入动态、灵活的方式来管理各种对象。对象与对象之间的具体实现互\n相透明。。\n具体含义是:当某个角色(可能是一个Php实例，调用者)需要另一个角色(另一个php实例，被调用者)的协助时，\n在传统的程序设计过程中，通常由调用者来创建被调用者的实例。但在Gene里，创建被调用者的工作不再由调用者来完成，\n因此;创建被调用者实例的工作通常由Gene工厂容器来完成，然后注入调用者，因此称为依赖注入。。\n\n* ## demo  ##\n     gene框架推荐用注入方式调用类，而不是以硬编码的方式耦合在一起。\n    \n    ### 参数: ###\n    无 \n    \n    > *返回值*： 空。\n\n    ### 实例: ###\n    ``` \n    //数据库类注入配置\n    $config->set(\"db\", [\n        \'class\' => \'\\Gene\\Db\',\n        \'params\' => [[\n        \'dsn\' => \'mysql:dbname=gene_admin;host=127.0.0.1;port=3306;charset=utf8\',\n        \'username\' => \'root\',\n        \'password\' => \'\',\n        \'options\' => [PDO::ATTR_PERSISTENT => true]\n            ]],\n        \'instance\' => true\n    ]);\n    \n    // models、services、Controllers 里调用db\n    $this->db;\n    \n    // 控制反转\n    $this->db = Gene\\Factiory::create(\"\\Gene\\Db\", $config);\n    \n    \n', '43', '0', '1', '1529484483', '1530409346');
INSERT INTO `app_mark` VALUES ('21', '1', '自动加载', '# 自动加载 #\n\n* ## 介绍  ##\n    Gene框架提供了自动加载支持；\n\n* ## autoload  ##\n     应用启动前运行autoload指定加载目录。\n    \n    ### 参数: ###\n    参数 | 类型 | 是否必填 | 注释 \n    ---|---|--- |--- \n    dir | string  | 是 | 应用加载目录。 \n    \n    > *返回值*： 空。\n\n    ### 实例: ###\n    ``` \n    define(\'APP_ROOT\', dirname(__dir__) . \'/application/\');\n    \n    $app = \\Gene\\Application::getInstance();\n    $app\n        ->autoload(APP_ROOT)\n        ->run();\n    \n* ## 配置公共类库加载目录  ##\n     可以通过配置php.ini，指定公共类库的加载目录。\n\n    ### 实例: ###\n    ``` \n    [gene]\n    gene.use_library=1\n    gene.library_root=\"/data/webapp/www/gene_ext/\"\n    ', '2', '0', '1', '1530409459', '0');
INSERT INTO `app_mark` VALUES ('22', '1', '命令行程序', '# 命令行程序 #\n\n* ## 介绍  ##\n    Gene支持命令行方式运行，方便编写定时运行任务；\n\n* ## Cli  ##\n     Cli需要在运行前指定加载目录，同时获取Cli参数传递给运行函数。\n     参数一：路由类型传递get；\n     参数二：URI传递获取的命令行参数；  \n\n    ### 实例: ###\n    ``` \n    <?php\n    define(\'APP_ROOT\', dirname(__dir__) . \'/application/\');\n    \n    $uri = \'\';  \n    if (isset($_SERVER[\'argv\'][1])) {\n        $uri = $_SERVER[\'argv\'][1];\n    } else {\n        exit(\'This script is run as CLI with no path?\');\n    }\n    \n    $app = \\Gene\\Application::getInstance();\n    $app\n        ->autoload(APP_ROOT)\n        ->load(\"router.ini.php\")\n        ->load(\"config.ini.php\")\n        ->run(\'get\', $uri);\n    ', '2', '0', '1', '1530409474', '0');

-- ----------------------------
-- Table structure for sys_group
-- ----------------------------
DROP TABLE IF EXISTS `sys_group`;
CREATE TABLE `sys_group` (
  `group_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '用户组ID',
  `group_pid` int(11) NOT NULL DEFAULT '0' COMMENT '上级用户组',
  `group_type` int(11) NOT NULL DEFAULT '0' COMMENT '类型',
  `group_title` varchar(50) NOT NULL DEFAULT '' COMMENT '用户组名',
  `group_description` varchar(250) NOT NULL DEFAULT '' COMMENT '用户组描述',
  `gd` int(11) NOT NULL DEFAULT '0' COMMENT '固定',
  `order` int(11) NOT NULL DEFAULT '0' COMMENT '排序',
  `status` int(11) NOT NULL DEFAULT '0' COMMENT '是否有效',
  `addtime` int(11) NOT NULL DEFAULT '0' COMMENT '时间',
  `updatetime` int(11) NOT NULL DEFAULT '0' COMMENT '修改时间',
  PRIMARY KEY (`group_id`,`status`),
  UNIQUE KEY `group_title` (`group_title`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='系统用户组';

-- ----------------------------
-- Records of sys_group
-- ----------------------------
INSERT INTO `sys_group` VALUES ('1', '0', '1', '系统管理员', '拥有最高权限', '1', '9', '1', '1484405543', '1517316148');
INSERT INTO `sys_group` VALUES ('2', '0', '0', '项目开发组', '项目开发组', '0', '0', '1', '1484232359', '1492069705');
INSERT INTO `sys_group` VALUES ('3', '0', '0', '访客用户', '预览系统，不能增加、修改、删除；', '0', '0', '1', '0', '0');

-- ----------------------------
-- Table structure for sys_log
-- ----------------------------
DROP TABLE IF EXISTS `sys_log`;
CREATE TABLE `sys_log` (
  `log_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `log_title` varchar(100) NOT NULL DEFAULT '' COMMENT '操作描述',
  `log_data` varchar(255) NOT NULL DEFAULT '' COMMENT '操作数据',
  `log_url` varchar(30) NOT NULL DEFAULT '' COMMENT '操作',
  `log_ip` varchar(20) NOT NULL DEFAULT '' COMMENT 'IP地址',
  `log_ip_area` varchar(50) NOT NULL DEFAULT '' COMMENT '地点',
  `user_id` int(11) NOT NULL DEFAULT '0' COMMENT '用户',
  `order` int(11) NOT NULL DEFAULT '0' COMMENT '排序',
  `status` int(11) NOT NULL DEFAULT '1' COMMENT '状态',
  `addtime` int(11) NOT NULL DEFAULT '0' COMMENT '增加时间',
  `updatetime` int(11) NOT NULL DEFAULT '0' COMMENT '修改时间',
  PRIMARY KEY (`log_id`),
  KEY `log_user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='系统日志';

-- ----------------------------
-- Records of sys_log
-- ----------------------------
INSERT INTO `sys_log` VALUES ('1', '后台退出', '用户名:admin', '/exit.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '1', '0', '1', '1528874416', '0');
INSERT INTO `sys_log` VALUES ('2', '后台登录', '用户名:gene', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528874610', '0');
INSERT INTO `sys_log` VALUES ('3', '后台退出', '用户名:gene', '/exit.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528874626', '0');
INSERT INTO `sys_log` VALUES ('4', '后台登录', '用户名:guest', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '4', '0', '1', '1528874648', '0');
INSERT INTO `sys_log` VALUES ('5', '后台退出', '用户名:guest', '/exit.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '4', '0', '1', '1528875503', '0');
INSERT INTO `sys_log` VALUES ('6', '后台登录', '用户名:gene', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528875514', '0');
INSERT INTO `sys_log` VALUES ('7', '后台退出', '用户名:gene', '/exit.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528876088', '0');
INSERT INTO `sys_log` VALUES ('8', '后台登录', '用户名:guest', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '4', '0', '1', '1528876106', '0');
INSERT INTO `sys_log` VALUES ('9', '后台退出', '用户名:guest', '/exit.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '4', '0', '1', '1528876856', '0');
INSERT INTO `sys_log` VALUES ('10', '后台登录', '用户名:gene', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528876869', '0');
INSERT INTO `sys_log` VALUES ('11', '后台退出', '用户名:gene', '/exit.action', '192.168.27.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528878029', '0');
INSERT INTO `sys_log` VALUES ('12', '后台登录', '用户名:gene', '/login.action', '192.168.27.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528878109', '0');
INSERT INTO `sys_log` VALUES ('13', '后台退出', '用户名:gene', '/exit.action', '192.168.27.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528878164', '0');
INSERT INTO `sys_log` VALUES ('14', '后台登录', '用户名:develop', '/login.action', '192.168.27.1', '未分配或者内网IP|0|0|0|0', '2', '0', '1', '1528878179', '0');
INSERT INTO `sys_log` VALUES ('15', '后台退出', '用户名:develop', '/exit.action', '192.168.27.1', '未分配或者内网IP|0|0|0|0', '2', '0', '1', '1528878664', '0');
INSERT INTO `sys_log` VALUES ('16', '后台登录', '用户名:develop', '/login.action', '192.168.27.1', '未分配或者内网IP|0|0|0|0', '2', '0', '1', '1528878676', '0');
INSERT INTO `sys_log` VALUES ('17', '后台退出', '用户名:develop', '/exit.action', '192.168.27.1', '未分配或者内网IP|0|0|0|0', '2', '0', '1', '1528878706', '0');
INSERT INTO `sys_log` VALUES ('18', '后台登录', '用户名:gene', '/login.action', '192.168.27.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528878719', '0');
INSERT INTO `sys_log` VALUES ('19', '后台退出', '用户名:gene', '/exit.action', '192.168.27.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528878735', '0');
INSERT INTO `sys_log` VALUES ('20', '后台登录', '用户名:guest', '/login.action', '192.168.27.1', '未分配或者内网IP|0|0|0|0', '4', '0', '1', '1528878778', '0');
INSERT INTO `sys_log` VALUES ('21', '后台登录', '用户名:gene', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528884480', '0');
INSERT INTO `sys_log` VALUES ('22', '后台退出', '用户名:gene', '/exit.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528886337', '0');
INSERT INTO `sys_log` VALUES ('23', '后台登录', '用户名:gene', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528886357', '0');
INSERT INTO `sys_log` VALUES ('24', '后台登录', '用户名:gene', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1528957358', '0');
INSERT INTO `sys_log` VALUES ('25', '后台登录', '用户名:gene', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1529128440', '0');
INSERT INTO `sys_log` VALUES ('26', '后台登录', '用户名:gene', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1529128540', '0');
INSERT INTO `sys_log` VALUES ('27', '后台退出', '用户名:gene', '/exit.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1529128984', '0');
INSERT INTO `sys_log` VALUES ('28', '后台登录', '用户名:gene', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1529131596', '0');
INSERT INTO `sys_log` VALUES ('29', '后台登录', '用户名:gene', '/login.action', '192.168.27.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1529131630', '0');
INSERT INTO `sys_log` VALUES ('30', '后台退出', '用户名:gene', '/exit.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1529240856', '0');
INSERT INTO `sys_log` VALUES ('31', '后台登录', '用户名:gene', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1529240929', '0');
INSERT INTO `sys_log` VALUES ('32', '后台退出', '用户名:gene', '/exit.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1529241051', '0');
INSERT INTO `sys_log` VALUES ('33', '后台登录', '用户名:gene', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1529241061', '0');
INSERT INTO `sys_log` VALUES ('34', '后台登录', '用户名:gene', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1529371952', '0');
INSERT INTO `sys_log` VALUES ('35', '后台退出', '用户名:gene', '/exit.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '43', '0', '1', '1529502305', '0');
INSERT INTO `sys_log` VALUES ('36', '后台退出', '用户名:admin', '/exit.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '1', '0', '1', '1530409320', '0');
INSERT INTO `sys_log` VALUES ('37', '后台登录', '用户名:develop', '/login.action', '127.0.0.1', '未分配或者内网IP|0|0|0|0', '2', '0', '1', '1530409335', '0');

-- ----------------------------
-- Table structure for sys_module
-- ----------------------------
DROP TABLE IF EXISTS `sys_module`;
CREATE TABLE `sys_module` (
  `module_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `module_pid` int(11) NOT NULL DEFAULT '0' COMMENT '上级模块',
  `module_path` varchar(30) NOT NULL DEFAULT '' COMMENT 'path',
  `module_cat` int(11) NOT NULL DEFAULT '0' COMMENT '模块类型',
  `module_title` varchar(50) NOT NULL DEFAULT '' COMMENT '模块名称',
  `module_type` varchar(30) NOT NULL DEFAULT '' COMMENT '操作',
  `module_url` varchar(50) NOT NULL DEFAULT '' COMMENT '路由URL地址',
  `module_icon` varchar(50) NOT NULL DEFAULT '' COMMENT '图标风格',
  `gd` int(11) NOT NULL DEFAULT '0' COMMENT '固定',
  `order` int(11) NOT NULL DEFAULT '0' COMMENT '排序',
  `status` int(11) NOT NULL DEFAULT '0' COMMENT '是否启用',
  `addtime` int(11) NOT NULL DEFAULT '0' COMMENT '添加时间',
  `updatetime` int(11) NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`module_id`),
  KEY `module_pid` (`module_pid`),
  KEY `module_url` (`module_url`)
) ENGINE=InnoDB AUTO_INCREMENT=106 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='系统模块表';

-- ----------------------------
-- Records of sys_module
-- ----------------------------
INSERT INTO `sys_module` VALUES ('1', '0', '0,', '1', '系统管理', '1', '', 'layui-icon-set', '1', '11', '1', '1488807642', '1528628229');
INSERT INTO `sys_module` VALUES ('2', '1', '0,1', '1', '用户管理', '1', 'user.html', 'layui-icon-user', '1', '14', '1', '1484462816', '1462951484');
INSERT INTO `sys_module` VALUES ('3', '1', '0,1', '1', '角色分组', '1', 'group.html', 'layui-icon-group', '1', '13', '1', '1484462923', '1462956540');
INSERT INTO `sys_module` VALUES ('4', '1', '0,1', '1', '系统日志', '1', 'log.html', 'layui-icon-log', '1', '1', '1', '1492070925', '1463022762');
INSERT INTO `sys_module` VALUES ('5', '1', '0,1', '0', '栏目管理', '1', 'module.html', 'layui-icon-menu-fill', '1', '16', '1', '1484462703', '1462951514');
INSERT INTO `sys_module` VALUES ('13', '5', '0,1,5', '0', '增加模块', '1', 'module/add.html', '', '1', '0', '1', '1463015014', '0');
INSERT INTO `sys_module` VALUES ('14', '5', '0,1,5', '0', '修改模块', '1', 'module/edit/:id.html', '', '1', '0', '1', '1494905366', '0');
INSERT INTO `sys_module` VALUES ('15', '5', '0,1,5', '0', '查看模块', '1', 'module/info/:id.html', '', '1', '0', '1', '1463015072', '0');
INSERT INTO `sys_module` VALUES ('16', '2', '0,1,2', '0', '增加用户', '1', 'user/add.html', '', '1', '0', '1', '1463021224', '0');
INSERT INTO `sys_module` VALUES ('17', '2', '0,1,2', '0', '修改用户', '1', 'user/edit/:id.html', '', '1', '0', '1', '1463021244', '0');
INSERT INTO `sys_module` VALUES ('18', '2', '0,1,2', '0', '查看用户', '1', 'user/info/:id.html', '', '1', '0', '1', '1463021267', '0');
INSERT INTO `sys_module` VALUES ('19', '3', '0,1,3', '0', '增加用户组', '1', 'group/add.html', '', '1', '0', '1', '1463021330', '0');
INSERT INTO `sys_module` VALUES ('20', '3', '0,1,3', '0', '修改用户组', '1', 'group/edit/:id.html', '', '1', '0', '1', '1463021344', '0');
INSERT INTO `sys_module` VALUES ('21', '3', '0,1,3', '0', '查看用户组', '1', 'group/info/:id.html', '', '1', '0', '1', '1463021408', '0');
INSERT INTO `sys_module` VALUES ('31', '5', '0,1,5', '0', '删除模块', '1', 'module/del/:id', '', '1', '0', '1', '1463727999', '1528349949');
INSERT INTO `sys_module` VALUES ('32', '2', '0,1,2', '0', '删除用户', '1', 'user/del/:id', '', '1', '0', '1', '1463728036', '1528349914');
INSERT INTO `sys_module` VALUES ('33', '3', '0,1,3', '0', '删除用户组', '1', 'group/del/:id', '', '1', '0', '1', '1463728092', '1528349937');
INSERT INTO `sys_module` VALUES ('34', '4', '0,1,4', '0', '删除日志', '1', 'log/del/:id', '', '1', '0', '1', '1463728119', '1528349966');
INSERT INTO `sys_module` VALUES ('43', '0', '0,', '0', '文档管理', '', '', 'layui-icon-auz', '0', '0', '1', '1527062210', '1528885577');
INSERT INTO `sys_module` VALUES ('44', '43', '0,,43', '0', '文档管理', '', 'mark.html', 'layui-icon-add-circle-fine', '0', '0', '1', '1527062293', '1528885625');
INSERT INTO `sys_module` VALUES ('45', '44', '0,,43,44', '0', '增加文档', '', 'mark/add.html', '', '0', '0', '1', '1528269074', '1528885697');
INSERT INTO `sys_module` VALUES ('46', '44', '0,,43,44', '0', '修改文档', '', 'mark/edit/:id.html', '', '0', '0', '1', '1528269262', '1528885681');
INSERT INTO `sys_module` VALUES ('58', '2', '0,1,2', '0', '批量删除', '', 'user/delall', '', '0', '0', '1', '1528350015', '1528350035');
INSERT INTO `sys_module` VALUES ('59', '2', '0,1,2', '0', '修改状态', '', 'user/status/:id', '', '0', '0', '1', '1528350086', '1528350136');
INSERT INTO `sys_module` VALUES ('60', '2', '0,1,2', '0', '添加保存', '', 'user/addpost', '', '0', '0', '1', '1528350223', '1528350648');
INSERT INTO `sys_module` VALUES ('61', '2', '0,1,2', '0', '修改保存', '', 'user/editpost', '', '0', '0', '1', '1528350254', '1528350633');
INSERT INTO `sys_module` VALUES ('62', '5', '0,1,5', '0', '批量删除', '', 'module/delall', '', '0', '0', '1', '1528373334', '1528373348');
INSERT INTO `sys_module` VALUES ('63', '5', '0,1,5', '0', '修改状态', '', 'module/status/:id', '', '0', '0', '1', '1528373382', '0');
INSERT INTO `sys_module` VALUES ('64', '5', '0,1,5', '0', '添加保存', '', 'module/addpost', '', '0', '0', '1', '1528373426', '0');
INSERT INTO `sys_module` VALUES ('65', '5', '0,1,5', '0', '修改保存', '', 'module/editpost', '', '0', '0', '1', '1528373477', '1528373510');
INSERT INTO `sys_module` VALUES ('66', '3', '0,1,3', '0', '批量删除', '', 'group/delall', '', '0', '0', '1', '1528373646', '0');
INSERT INTO `sys_module` VALUES ('67', '3', '0,1,3', '0', '修改状态', '', 'group/status/:id', '', '0', '0', '1', '1528373724', '0');
INSERT INTO `sys_module` VALUES ('68', '3', '0,1,3', '0', '添加保存', '', 'group/addpost', '', '0', '0', '1', '1528373748', '0');
INSERT INTO `sys_module` VALUES ('69', '3', '0,1,3', '0', '修改保存', '', 'group/editpost', '', '0', '0', '1', '1528373772', '0');
INSERT INTO `sys_module` VALUES ('97', '44', '0,,43,44', '0', '修改状态', '', 'mark/status/:id', '', '0', '0', '1', '0', '1528885670');
INSERT INTO `sys_module` VALUES ('98', '44', '0,,43,44', '0', '删除文档', '', 'mark/del/:id', '', '0', '0', '1', '0', '1528885664');
INSERT INTO `sys_module` VALUES ('99', '44', '0,,43,44', '0', '批量删除', '', 'mark/delall', '', '0', '0', '1', '0', '1528885650');
INSERT INTO `sys_module` VALUES ('100', '44', '0,,43,44', '0', '添加保存', '', 'mark/addpost', '', '0', '0', '1', '0', '1528885643');
INSERT INTO `sys_module` VALUES ('101', '44', '0,,43,44', '0', '修改保存', '', 'mark/editpost', '', '0', '0', '1', '0', '1528885636');
INSERT INTO `sys_module` VALUES ('102', '2', '0,1,2', '0', '退出登录', '', 'exit.action', '', '0', '0', '1', '1528852997', '0');
INSERT INTO `sys_module` VALUES ('103', '2', '0,1,2', '0', '修改资料', '', 'set.html', '', '0', '0', '1', '1528875990', '0');
INSERT INTO `sys_module` VALUES ('104', '2', '0,1,2', '0', '修改保存', '', 'save.html', '', '0', '0', '1', '1528876019', '0');
INSERT INTO `sys_module` VALUES ('105', '0', '0,', '0', '控制台', '', 'admin.html', '', '0', '0', '1', '1528886314', '1529119001');

-- ----------------------------
-- Table structure for sys_purview
-- ----------------------------
DROP TABLE IF EXISTS `sys_purview`;
CREATE TABLE `sys_purview` (
  `purview_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '权限ID',
  `purview_type` tinyint(100) NOT NULL DEFAULT '1' COMMENT '权限类型：1 后台、2 前台',
  `group_id` int(11) NOT NULL DEFAULT '0' COMMENT '用户组',
  `obj_id` int(11) NOT NULL DEFAULT '0' COMMENT '权限对象',
  `order` int(11) NOT NULL DEFAULT '0' COMMENT '排序',
  `status` int(11) NOT NULL DEFAULT '1' COMMENT '状态',
  `addtime` int(11) NOT NULL DEFAULT '0' COMMENT '增加时间',
  `updatetime` int(11) NOT NULL DEFAULT '0' COMMENT '修改时间',
  PRIMARY KEY (`purview_id`),
  UNIQUE KEY `purview_group_obj` (`purview_type`,`group_id`,`obj_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=853 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='系统权限';

-- ----------------------------
-- Records of sys_purview
-- ----------------------------
INSERT INTO `sys_purview` VALUES ('788', '1', '1', '105', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('789', '1', '1', '43', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('790', '1', '1', '44', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('791', '1', '1', '101', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('792', '1', '1', '100', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('793', '1', '1', '99', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('794', '1', '1', '98', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('795', '1', '1', '97', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('796', '1', '1', '46', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('797', '1', '1', '45', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('798', '1', '1', '1', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('799', '1', '1', '5', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('800', '1', '1', '65', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('801', '1', '1', '64', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('802', '1', '1', '63', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('803', '1', '1', '62', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('804', '1', '1', '31', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('805', '1', '1', '15', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('806', '1', '1', '14', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('807', '1', '1', '13', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('808', '1', '1', '4', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('809', '1', '1', '34', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('810', '1', '1', '3', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('811', '1', '1', '69', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('812', '1', '1', '68', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('813', '1', '1', '67', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('814', '1', '1', '66', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('815', '1', '1', '33', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('816', '1', '1', '21', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('817', '1', '1', '20', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('818', '1', '1', '19', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('819', '1', '1', '2', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('820', '1', '1', '104', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('821', '1', '1', '103', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('822', '1', '1', '102', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('823', '1', '1', '61', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('824', '1', '1', '60', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('825', '1', '1', '59', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('826', '1', '1', '58', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('827', '1', '1', '32', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('828', '1', '1', '18', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('829', '1', '1', '17', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('830', '1', '1', '16', '0', '1', '1528886325', '0');
INSERT INTO `sys_purview` VALUES ('831', '1', '2', '105', '0', '1', '1528886330', '0');
INSERT INTO `sys_purview` VALUES ('832', '1', '2', '43', '0', '1', '1528886330', '0');
INSERT INTO `sys_purview` VALUES ('833', '1', '2', '44', '0', '1', '1528886330', '0');
INSERT INTO `sys_purview` VALUES ('834', '1', '2', '101', '0', '1', '1528886330', '0');
INSERT INTO `sys_purview` VALUES ('835', '1', '2', '100', '0', '1', '1528886330', '0');
INSERT INTO `sys_purview` VALUES ('836', '1', '2', '46', '0', '1', '1528886330', '0');
INSERT INTO `sys_purview` VALUES ('837', '1', '2', '45', '0', '1', '1528886330', '0');
INSERT INTO `sys_purview` VALUES ('838', '1', '2', '1', '0', '1', '1528886330', '0');
INSERT INTO `sys_purview` VALUES ('839', '1', '2', '4', '0', '1', '1528886330', '0');
INSERT INTO `sys_purview` VALUES ('840', '1', '2', '104', '0', '1', '1528886330', '0');
INSERT INTO `sys_purview` VALUES ('841', '1', '2', '103', '0', '1', '1528886330', '0');
INSERT INTO `sys_purview` VALUES ('842', '1', '2', '102', '0', '1', '1528886330', '0');
INSERT INTO `sys_purview` VALUES ('843', '1', '3', '105', '0', '1', '1528886334', '0');
INSERT INTO `sys_purview` VALUES ('844', '1', '3', '43', '0', '1', '1528886334', '0');
INSERT INTO `sys_purview` VALUES ('845', '1', '3', '44', '0', '1', '1528886334', '0');
INSERT INTO `sys_purview` VALUES ('846', '1', '3', '46', '0', '1', '1528886334', '0');
INSERT INTO `sys_purview` VALUES ('847', '1', '3', '45', '0', '1', '1528886334', '0');
INSERT INTO `sys_purview` VALUES ('848', '1', '3', '1', '0', '1', '1528886334', '0');
INSERT INTO `sys_purview` VALUES ('849', '1', '3', '4', '0', '1', '1528886334', '0');
INSERT INTO `sys_purview` VALUES ('850', '1', '3', '104', '0', '1', '1528886334', '0');
INSERT INTO `sys_purview` VALUES ('851', '1', '3', '103', '0', '1', '1528886334', '0');
INSERT INTO `sys_purview` VALUES ('852', '1', '3', '102', '0', '1', '1528886334', '0');

-- ----------------------------
-- Table structure for sys_user
-- ----------------------------
DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user` (
  `user_id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  `user_name` varchar(50) NOT NULL DEFAULT '' COMMENT '用户',
  `user_salt` varchar(50) NOT NULL DEFAULT '' COMMENT '密码加盐',
  `user_pass` varchar(50) NOT NULL DEFAULT '' COMMENT '用户密码',
  `user_realname` varchar(50) NOT NULL DEFAULT '' COMMENT '用户真实姓名',
  `user_icon` varchar(150) NOT NULL DEFAULT '' COMMENT '头像',
  `group_id` int(11) NOT NULL DEFAULT '0' COMMENT '用户组ID',
  `gd` int(11) NOT NULL DEFAULT '0' COMMENT '固定',
  `order` int(11) NOT NULL DEFAULT '0' COMMENT '排序',
  `status` int(11) NOT NULL DEFAULT '0' COMMENT '状态',
  `addtime` int(11) NOT NULL DEFAULT '0' COMMENT '增加时间',
  `updatetime` int(11) NOT NULL DEFAULT '0' COMMENT '修改时间',
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `user_name` (`user_name`),
  KEY `user_group_id` (`group_id`)
) ENGINE=InnoDB AUTO_INCREMENT=44 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT COMMENT='系统用户';

-- ----------------------------
-- Records of sys_user
-- ----------------------------
INSERT INTO `sys_user` VALUES ('1', 'admin', 'df7c051cd41b5224', '13ebcad70d19c6e79a7aec6146873c06', 'admin', 'app/Cache/File/user_icon/20170115_67657472.jpg', '1', '1', '0', '1', '1462935324', '1507941771');
INSERT INTO `sys_user` VALUES ('2', 'develop', 'eeb10f00dc339499', 'd53b5aabc50121d79659317becfdb7b4', '小耿', 'app/Cache/File/user_icon/20170219_36442465.jpg', '2', '0', '0', '1', '1462936074', '1492919698');
INSERT INTO `sys_user` VALUES ('4', 'guest', '702a6f09da99c5f0', '908b766eb6f3b32837f1f14b5c2f4399', 'guest', '', '3', '0', '0', '1', '1491399061', '1494419512');
INSERT INTO `sys_user` VALUES ('43', 'gene', 'c146c1d8cb5cf5e2', '6dedade4509e503ab58b5c948e7c3403', '测试', '', '1', '0', '0', '1', '0', '0');
